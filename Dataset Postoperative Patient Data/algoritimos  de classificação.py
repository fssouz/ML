# -*- coding: utf-8 -*-
"""

Automatically generated by Colab.

"""

import pandas as pd

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv("post-operative.csv")
#dataset.head()
dataset

dataset.columns =['Lcore', 'Lsurf', 'L02', 'LBP','SURFSTBL','CORESTBL','BPSTBL','COMFORT','DECISION']

dataset

dataset_S = dataset[dataset['DECISION']=='S']
dataset_S

dataset_S['DECISION'].value_counts()

dataset = dataset[(dataset['DECISION']=="A") | (dataset['DECISION']=="I") | (dataset['DECISION']=="S")]

dataset['DECISION'].value_counts()

dataset.info()

dataset['DECISION'].hist()

dataset_S['BPSTBL'].value_counts

dataset_S['BPSTBL'].hist()

dataset_A = dataset[dataset['DECISION']=='A']
dataset_A['BPSTBL'].hist()

dataset_A

dataset_I = dataset[dataset['DECISION']=='I']
dataset_I['BPSTBL'].hist()

columns = ['SURFSTBL','CORESTBL','BPSTBL']
import matplotlib.pyplot as plt
for column in columns:
    plt.title(column)
    dataset_A[column].hist(color = "orange", alpha=0.5)
    dataset_I[column].hist(color = "red")
    dataset_S[column].hist(color = "blue", alpha=0.6)
    plt.show()

dataset['CORESTBL'].unique()

dataset

dataset_clean = dataset.drop([ 'COMFORT'], axis = 1)
dataset_clean.info()

dataset_clean['DECISION'].value_counts()

from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()
objList = dataset_clean.select_dtypes(include = "object").columns
for obj in objList:
    dataset_clean[obj] = lb.fit_transform(dataset_clean[obj].astype(str))
dataset_clean

df_sel = dataset_clean[['Lcore', 'Lsurf', 'L02', 'LBP','SURFSTBL','CORESTBL','BPSTBL']]
df_class = dataset_clean['DECISION']

from sklearn.model_selection import train_test_split

x_treino, x_teste, y_treino, y_teste = train_test_split(df_sel, df_class, test_size=0.3)

x_treino.shape

x_teste.shape

from sklearn.neighbors import KNeighborsClassifier

modelo = KNeighborsClassifier(n_neighbors = 5)

modelo = modelo.fit(x_treino, y_treino)

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix

y_prev = modelo.predict(x_teste)
y_prev

dataset_clean['DECISION'].value_counts()

accuray = accuracy_score(y_teste, y_prev)
pres= precision_score(y_teste, y_prev, average=None)
res =recall_score(y_teste, y_prev, average=None)
print("Modelo KNN")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)

confusion_matrix(y_teste, y_prev)

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics

clf = DecisionTreeClassifier()

clf = clf.fit(x_treino,y_treino)

y_pred = clf.predict(x_teste)

accuray = accuracy_score(y_teste, y_pred)
pres= precision_score(y_teste, y_pred, average=None)
res =recall_score(y_teste, y_pred, average=None)
print("Modelo Arvore Decisão")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)

confusion_matrix(y_teste, y_pred)

from sklearn.naive_bayes import GaussianNB

model = GaussianNB()

model.fit(x_treino, y_treino)

y_pred = model.predict(x_teste)

accuray = accuracy_score(y_teste, y_pred)
pres= precision_score(y_teste, y_pred, average=None)
res =recall_score(y_teste, y_pred, average=None)
print("Modelo NAIVE BAYES")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)

confusion_matrix(y_teste, y_pred)

dataset_clean

dataset_clean.DECISION.value_counts()

#rebalanceando o dataset
target_count = dataset_clean.DECISION.value_counts()
print('Class 0:', target_count[0])
print('Class 1:', target_count[1])
print('Class 2:', target_count[2])
target_count.plot(kind='bar', title='Count (target)',color = ['#1F77B4', '#FF7F0E','#FF8F5E']);

#rebalanceando o dataset
from imblearn.over_sampling import RandomOverSampler, SMOTE
from collections import Counter
ros = RandomOverSampler()
X_train_ros, y_train_ros= ros.fit_resample(x_treino, y_treino)
print(sorted(Counter(y_train_ros).items()))

X_train_ros.shape

x_teste.shape

modeloKnn = KNeighborsClassifier(n_neighbors = 5)

modeloKnn = modeloKnn.fit(X_train_ros, y_train_ros)
y_prev_knn = modeloKnn.predict(x_teste)

modeloTree = DecisionTreeClassifier()

modeloTree = modeloTree.fit(X_train_ros, y_train_ros)

y_pred_tree = modeloTree.predict(x_teste)

modelG = GaussianNB()

modelG.fit(X_train_ros, y_train_ros)

y_pred_gauss = modelG.predict(x_teste)

accuray = accuracy_score(y_teste, y_prev_knn)
pres= precision_score(y_teste, y_prev_knn, average=None)
res =recall_score(y_teste, y_prev_knn, average=None)
print("Modelo KNN")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)

accuray = accuracy_score(y_teste, y_pred_tree)
pres= precision_score(y_teste, y_pred_tree, average=None)
res =recall_score(y_teste, y_pred_tree, average=None)
print("Modelo Arvore")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)

accuray = accuracy_score(y_teste, y_pred_gauss)
pres= precision_score(y_teste, y_pred_gauss, average=None)
res =recall_score(y_teste, y_pred_gauss, average=None)
print("Modelo NAIVE BAYES")
print("Acuracia:", accuray)
print("Precisão:", pres)
print("Revogação", res)
